{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/day-1-prompting-d350e136-aea6-4c16-8377-76de987e70d2.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20241127/auto/storage/goog4_request&X-Goog-Date=20241127T100451Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=aa9e0dc6fc1b5e49d6906f8cb18ee214cf028cdc7c291596224ac8e80dc7d7d586d31927a34a1fcc04b0f1e9a8dbfa63da6334211556f5a2696ddf447b1ded6d3af8c38990fefcf36755e440d99734167b3bc08c0492f5a86913990f3eb56c81a23d62a90bc351b90cd370fc1213923c50ecbd80f21547097d1faf9b6bb1348b7f295e9a8f15fb2f0ce3782b5221df18cb7805066539b2e6a6c4de86f11beb416b0c890dd15a7f59b045c6b3414c8c39901f23eb3f2dc47e6b09b2db323b3482eb26d40f44421885a804fa4d51f07a1151756f98e69965284e740aa40573e01ad60dbd35cc21f2c513f971677fbcb70d982ccf7fa69f48fd769e8bb3d3f1a4df","timestamp":1732701977574}]},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["%pip install -U \"google-generativeai\""],"metadata":{"id":"NzwzJFU9LqkJ","trusted":true,"execution":{"iopub.status.busy":"2024-11-27T10:03:30.949832Z","iopub.execute_input":"2024-11-27T10:03:30.950212Z","iopub.status.idle":"2024-11-27T10:03:37.729196Z","shell.execute_reply.started":"2024-11-27T10:03:30.950174Z","shell.execute_reply":"2024-11-27T10:03:37.727805Z"},"executionInfo":{"status":"ok","timestamp":1732702070376,"user_tz":-330,"elapsed":12279,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"5a204f52-4f61-4321-c0ef-b0507d3f05cd","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: google-generativeai in /usr/local/lib/python3.10/dist-packages (0.8.3)\n","Requirement already satisfied: google-ai-generativelanguage==0.6.10 in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (0.6.10)\n","Requirement already satisfied: google-api-core in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.19.2)\n","Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.151.0)\n","Requirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.27.0)\n","Requirement already satisfied: protobuf in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (4.25.5)\n","Requirement already satisfied: pydantic in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.9.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (4.66.6)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (4.12.2)\n","Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from google-ai-generativelanguage==0.6.10->google-generativeai) (1.25.0)\n","Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core->google-generativeai) (1.66.0)\n","Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core->google-generativeai) (2.32.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai) (5.5.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai) (0.4.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai) (4.9)\n","Requirement already satisfied: httplib2<1.dev0,>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai) (0.22.0)\n","Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai) (0.2.0)\n","Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai) (4.1.1)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic->google-generativeai) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic->google-generativeai) (2.23.4)\n","Requirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.10->google-generativeai) (1.68.0)\n","Requirement already satisfied: grpcio-status<2.0.dev0,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.10->google-generativeai) (1.62.3)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1.dev0,>=0.19.0->google-api-python-client->google-generativeai) (3.2.0)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-generativeai) (0.6.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai) (2024.8.30)\n"]}],"execution_count":null},{"cell_type":"markdown","source":["You do not need to restart the kernel."],"metadata":{"id":"HfuxE7n0FMaI"}},{"cell_type":"code","source":["import google.generativeai as genai\n","from IPython.display import HTML, Markdown, display"],"metadata":{"id":"5DwxYIRavMST","trusted":true,"executionInfo":{"status":"ok","timestamp":1732788699866,"user_tz":-330,"elapsed":3351,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":["### Set up your API key\n","\n","To run the following cell, your API key must be stored it in a [Kaggle secret](https://www.kaggle.com/discussions/product-feedback/114053) named `GOOGLE_API_KEY`.\n","\n","If you don't already have an API key, you can grab one from [AI Studio](https://aistudio.google.com/app/apikey). You can find [detailed instructions in the docs](https://ai.google.dev/gemini-api/docs/api-key).\n","\n","To make the key available through Kaggle secrets, choose `Secrets` from the `Add-ons` menu and follow the instructions to add your key or enable it for this notebook."],"metadata":{"id":"DNEt2BCOvOJ1"}},{"cell_type":"code","source":["from google.colab import userdata\n","\n","GOOGLE_API_KEY = userdata.get(\"GOOGLE_API_KEY\")\n","genai.configure(api_key=GOOGLE_API_KEY)"],"metadata":{"id":"SHl0bkPCvayd","trusted":true,"executionInfo":{"status":"ok","timestamp":1732788705868,"user_tz":-330,"elapsed":2578,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":["If you received an error response along the lines of `No user secrets exist for kernel id ...`, then you need to add your API key via `Add-ons`, `Secrets` **and** enable it.\n","\n","![Screenshot of the checkbox to enable GOOGLE_API_KEY secret](https://storage.googleapis.com/kaggle-media/Images/5gdai_sc_3.png)"],"metadata":{"id":"4e720472fd86"}},{"cell_type":"markdown","source":["### Run your first prompt\n","\n","In this step, you will test that your API key is set up correctly by making a request. The `gemini-1.5-flash` model has been selected here."],"metadata":{"id":"H_YXCYIKvyZJ"}},{"cell_type":"code","source":["flash = genai.GenerativeModel('gemini-1.5-flash')\n","response = flash.generate_content(\"Explain AI to me like I'm a kid.\")\n","print(response.text)"],"metadata":{"id":"BV1o0PmcvyJF","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":251},"executionInfo":{"status":"ok","timestamp":1732788716635,"user_tz":-330,"elapsed":6689,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"c93b8eb2-db91-44df-fd56-0386f819fdbc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Imagine you have a really smart puppy.  You teach it tricks, like \"sit\" and \"fetch.\"  At first, the puppy doesn't know what those words mean, but you show it what to do, and it learns!\n","\n","Artificial Intelligence, or AI, is like teaching a computer to be a smart puppy.  Instead of teaching it tricks, we teach it to do things like:\n","\n","* **Recognize pictures:**  Show it lots of pictures of cats, and it learns to tell the difference between a cat and a dog.\n","* **Understand words:**  Read it lots of stories, and it learns to understand what you're saying when you talk to it.\n","* **Play games:** Teach it the rules of chess, and it learns how to play and even beat you!\n","\n","We do this by giving the computer lots and lots of information and showing it examples of what to do.  The computer then uses that information to learn and get better at the task, just like your puppy gets better at fetching the ball.\n","\n","It's not really *thinking* like a person, though. It's more like following very complicated instructions really, really fast.  But it can still do amazing things!\n","\n"]}],"execution_count":3},{"cell_type":"markdown","source":["The response often comes back in markdown format, which you can render directly in this notebook."],"metadata":{"id":"f60ed9d8ae41"}},{"cell_type":"code","source":["Markdown(response.text)"],"metadata":{"id":"c933e5e460a5","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":209},"executionInfo":{"status":"ok","timestamp":1732788733404,"user_tz":-330,"elapsed":473,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"5a211df0-8fa4-499a-b060-70d1a2d53bc9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"Imagine you have a really smart puppy.  You teach it tricks, like \"sit\" and \"fetch.\"  At first, the puppy doesn't know what those words mean, but you show it what to do, and it learns!\n\nArtificial Intelligence, or AI, is like teaching a computer to be a smart puppy.  Instead of teaching it tricks, we teach it to do things like:\n\n* **Recognize pictures:**  Show it lots of pictures of cats, and it learns to tell the difference between a cat and a dog.\n* **Understand words:**  Read it lots of stories, and it learns to understand what you're saying when you talk to it.\n* **Play games:** Teach it the rules of chess, and it learns how to play and even beat you!\n\nWe do this by giving the computer lots and lots of information and showing it examples of what to do.  The computer then uses that information to learn and get better at the task, just like your puppy gets better at fetching the ball.\n\nIt's not really *thinking* like a person, though. It's more like following very complicated instructions really, really fast.  But it can still do amazing things!\n"},"metadata":{},"execution_count":4}],"execution_count":4},{"cell_type":"markdown","source":["### Start a chat\n","\n","The previous example uses a single-turn, text-in/text-out structure, but you can also set up a multi-turn chat structure too."],"metadata":{"id":"byx0pT9ZMW2Q"}},{"cell_type":"code","source":["chat = flash.start_chat(history=[])\n","response = chat.send_message('Hello! My name is Zlork.')\n","print(response.text)"],"metadata":{"id":"lV_S5ZL5MidD","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1732788756401,"user_tz":-330,"elapsed":3822,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"2a73a0fc-cc1a-4352-866e-96c2c3c62361"},"outputs":[{"output_type":"stream","name":"stdout","text":["It's nice to meet you, Zlork!  How can I help you today?\n","\n"]}],"execution_count":5},{"cell_type":"code","source":["response = chat.send_message('Can you tell something interesting about dinosaurs?')\n","print(response.text)"],"metadata":{"id":"7b0372c3c64a","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1732788766544,"user_tz":-330,"elapsed":2444,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"5edb3680-e4cf-41ca-bd15-aaabdedef854"},"outputs":[{"output_type":"stream","name":"stdout","text":["Many dinosaurs likely weren't the drab, gray creatures often depicted.  Recent discoveries and analyses of fossilized pigments suggest that many dinosaurs, especially smaller ones, were vibrantly colored, possibly with complex patterns for camouflage, courtship displays, or thermoregulation (controlling body temperature).  Think less \"gray lizard\" and more \"tropical bird\" in terms of their appearance!\n","\n"]}],"execution_count":6},{"cell_type":"code","source":["# While you have the `chat` object around, the conversation state\n","# persists. Confirm that by asking if it knows my name.\n","response = chat.send_message('Do you remember what my name is?')\n","print(response.text)"],"metadata":{"id":"d3f9591392a7","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1732788802162,"user_tz":-330,"elapsed":2198,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"8ddae472-f26e-4d01-9062-809407e55780"},"outputs":[{"output_type":"stream","name":"stdout","text":["Yes, your name is Zlork.\n","\n"]}],"execution_count":7},{"cell_type":"markdown","source":["### Choose a model\n","\n","The Gemini API provides access to a number of models from the Gemini model family. Read about the available models and their capabilities on the [model overview page](https://ai.google.dev/gemini-api/docs/models/gemini).\n","\n","In this step you'll use the API to list all of the available models."],"metadata":{"id":"2KAjpr1200sW"}},{"cell_type":"code","source":["for model in genai.list_models():\n","  print(model.name)"],"metadata":{"id":"uUUZa2uq2jDm","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":589},"executionInfo":{"status":"ok","timestamp":1732789053655,"user_tz":-330,"elapsed":2605,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"01e8419f-187d-480c-95d2-a5f0049efea1"},"outputs":[{"output_type":"stream","name":"stdout","text":["models/chat-bison-001\n","models/text-bison-001\n","models/embedding-gecko-001\n","models/gemini-1.0-pro-latest\n","models/gemini-1.0-pro\n","models/gemini-pro\n","models/gemini-1.0-pro-001\n","models/gemini-1.0-pro-vision-latest\n","models/gemini-pro-vision\n","models/gemini-1.5-pro-latest\n","models/gemini-1.5-pro-001\n","models/gemini-1.5-pro-002\n","models/gemini-1.5-pro\n","models/gemini-1.5-pro-exp-0801\n","models/gemini-1.5-pro-exp-0827\n","models/gemini-1.5-flash-latest\n","models/gemini-1.5-flash-001\n","models/gemini-1.5-flash-001-tuning\n","models/gemini-1.5-flash\n","models/gemini-1.5-flash-exp-0827\n","models/gemini-1.5-flash-002\n","models/gemini-1.5-flash-8b\n","models/gemini-1.5-flash-8b-001\n","models/gemini-1.5-flash-8b-latest\n","models/gemini-1.5-flash-8b-exp-0827\n","models/gemini-1.5-flash-8b-exp-0924\n","models/learnlm-1.5-pro-experimental\n","models/gemini-exp-1114\n","models/gemini-exp-1121\n","models/embedding-001\n","models/text-embedding-004\n","models/aqa\n"]}],"execution_count":8},{"cell_type":"markdown","source":["The [`models.list`](https://ai.google.dev/api/models#method:-models.list) response also returns additional information about the model's capabilities, like the token limits and supported parameters."],"metadata":{"id":"rN49kSI54R1v"}},{"cell_type":"code","source":["for model in genai.list_models():\n","  if model.name == 'models/gemini-1.5-flash':\n","    print(model)\n","    break"],"metadata":{"id":"k7JJ1K6j4Rl8","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":249},"executionInfo":{"status":"ok","timestamp":1732789068450,"user_tz":-330,"elapsed":1799,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"4ba43bec-dce4-40a6-e123-bb83c8e74527"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model(name='models/gemini-1.5-flash',\n","      base_model_id='',\n","      version='001',\n","      display_name='Gemini 1.5 Flash',\n","      description=('Alias that points to the most recent stable version of Gemini 1.5 Flash, our '\n","                   'fast and versatile multimodal model for scaling across diverse tasks.'),\n","      input_token_limit=1000000,\n","      output_token_limit=8192,\n","      supported_generation_methods=['generateContent', 'countTokens'],\n","      temperature=1.0,\n","      max_temperature=2.0,\n","      top_p=0.95,\n","      top_k=40)\n"]}],"execution_count":9},{"cell_type":"markdown","source":["## Explore generation parameters\n","\n"],"metadata":{"id":"5rU_UBlZdooM"}},{"cell_type":"markdown","source":["### Output length\n","\n","When generating text with an LLM, the output length affects cost and performance. Generating more tokens increases computation, leading to higher energy consumption, latency, and cost.\n","\n","To stop the model from generating tokens past a limit, you can specify the `max_output_tokens` parameter when using the Gemini API. Specifying this parameter does not influence the generation of the output tokens, so the output will not become more stylistically or textually succinct, but it will stop generating tokens once the specified length is reached. Prompt engineering may be required to generate a more complete output for your given limit."],"metadata":{"id":"G7NfEizeipbW"}},{"cell_type":"code","source":["short_model = genai.GenerativeModel(\n","    'gemini-1.5-flash',\n","    generation_config=genai.GenerationConfig(max_output_tokens=200))\n","\n","response = short_model.generate_content('Write a 1000 word essay on the importance of olives in modern society.')\n","print(response.text)"],"metadata":{"id":"qVf23JsIi9ma","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":126},"executionInfo":{"status":"ok","timestamp":1732789106578,"user_tz":-330,"elapsed":4721,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"01454ec4-1b57-4b88-adbd-4e3ddf381e63"},"outputs":[{"output_type":"stream","name":"stdout","text":["## The Enduring Importance of Olives in Modern Society\n","\n","The olive, a seemingly unassuming fruit, holds a position of profound significance in modern society, extending far beyond its culinary applications.  Its historical importance, interwoven with the fabric of Mediterranean civilizations, continues to resonate today, manifesting in economic, cultural, environmental, and even health-related spheres.  Understanding the multifaceted role of the olive in the 21st century reveals not only a fascinating agricultural story but also a microcosm of interconnected global systems and cultural heritage.\n","\n","The most immediate impact of olives lies in their gastronomic contribution.  Olive oil, extracted from the fruit, is a cornerstone of the Mediterranean diet, lauded worldwide for its purported health benefits and its versatility in cooking.  From the simplest drizzle on a salad to the complex flavor profiles of sophisticated dishes, olive oil imparts a distinct taste and texture that is integral to numerous cuisines.  Beyond its use as a cooking ingredient, olive oil is also a key component in cosmetics and\n"]}],"execution_count":10},{"cell_type":"code","source":["response = short_model.generate_content('Write a short poem on the importance of olives in modern society.')\n","print(response.text)"],"metadata":{"id":"W-3kR2F5kdMR","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":196},"executionInfo":{"status":"ok","timestamp":1732789108781,"user_tz":-330,"elapsed":2211,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"ec357f96-3545-4524-c7c2-be0a0a5e70c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["From ancient groves, a bounty spread,\n","The olive's grace, its oil, its bread.\n","In modern kitchens, light it brings,\n","A healthy heart, the flavor sings.\n","\n","From tapenade to creamy spread,\n","A versatile fruit, so richly bred.\n","In beauty products, gentle care,\n","The olive's gift, beyond compare. \n","\n"]}],"execution_count":11},{"cell_type":"markdown","source":["Explore with your own prompts. Try a prompt with a restrictive output limit and then adjust the prompt to work within that limit."],"metadata":{"id":"3ZhDSLB6lqqB"}},{"cell_type":"markdown","source":["### Temperature\n","\n","Temperature controls the degree of randomness in token selection. Higher temperatures result in a higher number of candidate tokens from which the next output token is selected, and can produce more diverse results, while lower temperatures have the opposite effect, such that a temperature of 0 results in greedy decoding, selecting the most probable token at each step.\n","\n","Temperature doesn't provide any guarantees of randomness, but it can be used to \"nudge\" the output somewhat.\n","\n","**Note that if you see a 429 Resource Exhausted error here, you may be able to edit the words in the prompt slightly to progress.**"],"metadata":{"id":"alx-WaAvir_9"}},{"cell_type":"code","source":["from google.api_core import retry\n","\n","high_temp_model = genai.GenerativeModel(\n","    'gemini-1.5-flash',\n","    generation_config=genai.GenerationConfig(temperature=2.0))\n","\n","\n","# When running lots of queries, it's a good practice to use a retry policy so your code\n","# automatically retries when hitting Resource Exhausted (quota limit) errors.\n","retry_policy = {\n","    \"retry\": retry.Retry(predicate=retry.if_transient_error, initial=10, multiplier=1.5, timeout=300)\n","}\n","\n","for _ in range(5):\n","  response = high_temp_model.generate_content('Pick a random colour... (respond in a single word)',\n","                                              request_options=retry_policy)\n","  if response.parts:\n","    print(response.text, '-' * 25)"],"metadata":{"id":"SHraGMzqnZqt","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":196},"executionInfo":{"status":"ok","timestamp":1732789115085,"user_tz":-330,"elapsed":6325,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"3d76c03c-0be4-421c-c91c-e614aa72f82d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Maroon\n"," -------------------------\n","Aquamarine\n"," -------------------------\n","Marigold\n"," -------------------------\n","Purple\n"," -------------------------\n","Maroon\n"," -------------------------\n"]}],"execution_count":12},{"cell_type":"markdown","source":["Now try the same prompt with temperature set to zero. Note that the output is not completely deterministic, as other parameters affect token selection, but the results will tend to be more stable."],"metadata":{"id":"z3J4pCTuof7e"}},{"cell_type":"code","source":["low_temp_model = genai.GenerativeModel(\n","    'gemini-1.5-flash',\n","    generation_config=genai.GenerationConfig(temperature=0.0))\n","\n","for _ in range(5):\n","  response = low_temp_model.generate_content('Pick a random colour... (respond in a single word)',\n","                                             request_options=retry_policy)\n","  if response.parts:\n","    print(response.text, '-' * 25)"],"metadata":{"id":"clymkWv-PfUZ","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":196},"executionInfo":{"status":"ok","timestamp":1732789121789,"user_tz":-330,"elapsed":6731,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"b14424df-50c4-4950-9eb1-5c5bd5c91607"},"outputs":[{"output_type":"stream","name":"stdout","text":["Maroon\n"," -------------------------\n","Maroon\n"," -------------------------\n","Maroon\n"," -------------------------\n","Maroon\n"," -------------------------\n","Maroon\n"," -------------------------\n"]}],"execution_count":13},{"cell_type":"markdown","source":["### Top-K and top-P\n","\n","Like temperature, top-K and top-P parameters are also used to control the diversity of the model's output.\n","\n","Top-K is a positive integer that defines the number of most probable tokens from which to select the output token. A top-K of 1 selects a single token, performing greedy decoding.\n","\n","Top-P defines the probability threshold that, once cumulatively exceeded, tokens stop being selected as candidates. A top-P of 0 is typically equivalent to greedy decoding, and a top-P of 1 typically selects every token in the model's vocabulary.\n","\n","When both are supplied, the Gemini API will filter top-K tokens first, then top-P and then finally sample from the candidate tokens using the supplied temperature.\n","\n","Run this example a number of times, change the settings and observe the change in output."],"metadata":{"id":"St5nt3vzitsZ"}},{"cell_type":"code","source":["model = genai.GenerativeModel(\n","    'gemini-1.5-flash-001',\n","    generation_config=genai.GenerationConfig(\n","        # These are the default values for gemini-1.5-flash-001.\n","        temperature=1.0,\n","        top_k=64,\n","        top_p=0.95,\n","    ))\n","\n","story_prompt = \"You are a creative writer. Write a short story about a cat who goes on an adventure.\"\n","response = model.generate_content(story_prompt, request_options=retry_policy)\n","print(response.text)"],"metadata":{"id":"lPlzpEavUV8F","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":323},"executionInfo":{"status":"ok","timestamp":1732789126173,"user_tz":-330,"elapsed":4410,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"aa6995dc-879f-44ad-b1fd-b2383839ff39"},"outputs":[{"output_type":"stream","name":"stdout","text":["Jasper was no ordinary cat. He wasn't content with napping in sunbeams and chasing dust motes. Jasper yearned for adventure, for something beyond the predictable routine of his life in a cozy cottage with a kind old woman named Agnes.\n","\n","One morning, while Agnes was out tending her garden, a peculiar box arrived. It was addressed to Jasper, and though he couldn't read, he could sense the excitement bubbling within it. The box contained a tiny, hand-crafted sailing ship, complete with a sail billowing proudly, and a tiny, intricately carved map. This was no ordinary toy. This was an invitation to adventure.\n","\n","Jasper, with a mischievous glint in his eye, knew what he had to do. He jumped onto the kitchen counter, snatched a juicy sausage from Agnes's breakfast plate, and stuffed it into the ship's hold. His supplies packed, he carefully carried the ship outside, navigating the intricate map in his head.\n","\n","The garden was a vast, unknown world to Jasper. He scrambled over mounds of earth, negotiated a treacherous path through the prickly rose bushes, and finally, reached a sun-drenched, shallow pool, perfect for his first voyage. With a determined meow, he launched the ship, the tiny sail catching the breeze.\n","\n","The voyage was fraught with danger. A clumsy robin nearly capsized the ship with its clumsy landings, and a grumpy squirrel, territorial over his nut stash, launched a barrage of acorns at the vessel. But Jasper, with his feline agility, managed to dodge the projectiles and navigate the treacherous currents of the garden pond.\n","\n","Finally, after a thrilling journey, he reached the end of his journey. A magnificent sunflower, its petals reaching for the sky, served as his lighthouse, guiding him to a tiny island in the center of the pond. There, amongst the lily pads, lay a treasure - a juicy, plump mouse, sunbathing on a leaf.\n","\n","Jasper, his heart pounding with triumph, stalked his prey, his whiskers twitching with anticipation. He pounced, the mouse squeaking in surprise, and brought it back to the shore, a testament to his bravery and resourcefulness.\n","\n","Agnes, returning from her gardening, found Jasper perched proudly on the edge of the pond, his whiskers twitching as he surveyed his handiwork. He looked up at her, a triumphant gleam in his eyes. This wasn't just any cat. This was Jasper, the explorer, the adventurer, the conquering hero of the garden pond. And he knew, with a satisfied purr, that this was only the beginning of his adventures. \n","\n"]}],"execution_count":14},{"cell_type":"markdown","source":["## Prompting\n","\n","This section contains some prompts from the chapter for you to try out directly in the API. Try changing the text here to see how each prompt performs with different instructions, more examples, or any other changes you can think of."],"metadata":{"id":"rMrYs1koY6DX"}},{"cell_type":"markdown","source":["### Zero-shot\n","\n","Zero-shot prompts are prompts that describe the request for the model directly.\n","\n","<table align=left>\n","  <td>\n","    <a target=\"_blank\" href=\"https://aistudio.google.com/prompts/1gzKKgDHwkAvexG5Up0LMtl1-6jKMKe4g\"><img src=\"https://ai.google.dev/site-assets/images/marketing/home/icon-ais.png\" style=\"height: 24px\" height=24/> Open in AI Studio</a>\n","  </td>\n","</table>"],"metadata":{"id":"hhj_tQidZJP7"}},{"cell_type":"code","source":["model = genai.GenerativeModel(\n","    'gemini-1.5-flash-001',\n","    generation_config=genai.GenerationConfig(\n","        temperature=0.1,\n","        top_p=1,\n","        max_output_tokens=5,\n","    ))\n","\n","zero_shot_prompt = \"\"\"Classify movie reviews as POSITIVE, NEUTRAL or NEGATIVE.\n","Review: \"Her\" is a disturbing study revealing the direction\n","humanity is headed if AI is allowed to keep evolving,\n","unchecked. I wish there were more movies like this masterpiece.\n","Sentiment: \"\"\"\n","\n","response = model.generate_content(zero_shot_prompt, request_options=retry_policy)\n","print(response.text)"],"metadata":{"id":"1_t-cwnDZzbH","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1732793952033,"user_tz":-330,"elapsed":3301,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"07f25d9c-873e-42bf-d1a9-5c6b95570d27"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sentiment: **POSITIVE**\n"]}],"execution_count":24},{"cell_type":"markdown","source":["#### Enum mode\n","\n","The models are trained to generate text, and can sometimes produce more text than you may wish for. In the preceding example, the model will output the label, sometimes it can include a preceding \"Sentiment\" label, and without an output token limit, it may also add explanatory text afterwards.\n","\n","The Gemini API has an [Enum mode](https://github.com/google-gemini/cookbook/blob/main/quickstarts/Enum.ipynb) feature that allows you to constrain the output to a fixed set of values."],"metadata":{"id":"3b5568bdeb11"}},{"cell_type":"code","source":["import enum\n","\n","class Sentiment(enum.Enum):\n","    POSITIVE = \"positive\"\n","    NEUTRAL = \"neutral\"\n","    NEGATIVE = \"negative\"\n","\n","\n","model = genai.GenerativeModel(\n","    'gemini-1.5-flash-001',\n","    generation_config=genai.GenerationConfig(\n","        response_mime_type=\"text/x.enum\",\n","        response_schema=Sentiment\n","    ))\n","\n","response = model.generate_content(zero_shot_prompt, request_options=retry_policy)\n","print(response.text)"],"metadata":{"id":"ad118a56c598","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1732793953812,"user_tz":-330,"elapsed":1784,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"c2c02a6e-ad61-4b68-aa03-882f2cd31fca"},"outputs":[{"output_type":"stream","name":"stdout","text":["positive\n"]}],"execution_count":25},{"cell_type":"markdown","source":["### One-shot and few-shot\n","\n","Providing an example of the expected response is known as a \"one-shot\" prompt. When you provide multiple examples, it is a \"few-shot\" prompt.\n","\n","<table align=left>\n","  <td>\n","    <a target=\"_blank\" href=\"https://aistudio.google.com/prompts/1jjWkjUSoMXmLvMJ7IzADr_GxHPJVV2bg\"><img src=\"https://ai.google.dev/site-assets/images/marketing/home/icon-ais.png\" style=\"height: 24px\" height=24/> Open in AI Studio</a>\n","  </td>\n","</table>\n"],"metadata":{"id":"0udiSwNbv45W"}},{"cell_type":"code","source":["model = genai.GenerativeModel(\n","    'gemini-1.5-flash-latest',\n","    generation_config=genai.GenerationConfig(\n","        temperature=0.1,\n","        top_p=1,\n","        max_output_tokens=250,\n","    ))\n","\n","few_shot_prompt = \"\"\"Parse a customer's pizza order into valid JSON:\n","\n","EXAMPLE:\n","I want a small pizza with cheese, tomato sauce, and pepperoni.\n","JSON Response:\n","```\n","{\n","\"size\": \"small\",\n","\"type\": \"normal\",\n","\"ingredients\": [\"cheese\", \"tomato sauce\", \"peperoni\"]\n","}\n","```\n","\n","EXAMPLE:\n","Can I get a large pizza with tomato sauce, basil and mozzarella\n","JSON Response:\n","```\n","{\n","\"size\": \"large\",\n","\"type\": \"normal\",\n","\"ingredients\": [\"tomato sauce\", \"basil\", \"mozzarella\"]\n","}\n","\n","ORDER:\n","\"\"\"\n","\n","customer_order = \"Give me a large with cheese & pineapple\"\n","\n","\n","response = model.generate_content([few_shot_prompt, customer_order], request_options=retry_policy)\n","print(response.text)"],"metadata":{"id":"hd4mVUukwOKZ","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":180},"executionInfo":{"status":"ok","timestamp":1732793955572,"user_tz":-330,"elapsed":1767,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"775d4572-ac5e-4032-ed6d-6327d99f2163"},"outputs":[{"output_type":"stream","name":"stdout","text":["```json\n","{\n","  \"size\": \"large\",\n","  \"type\": \"normal\",\n","  \"ingredients\": [\"cheese\", \"pineapple\"]\n","}\n","```\n","\n"]}],"execution_count":26},{"cell_type":"markdown","source":["#### JSON mode\n","\n","To provide control over the schema, and to ensure that you only receive JSON (with no other text or markdown), you can use the Gemini API's [JSON mode](https://github.com/google-gemini/cookbook/blob/main/quickstarts/JSON_mode.ipynb). This forces the model to constrain decoding, such that token selection is guided by the supplied schema."],"metadata":{"id":"021293096f08"}},{"cell_type":"code","source":["import typing_extensions as typing\n","\n","class PizzaOrder(typing.TypedDict):\n","    size: str\n","    ingredients: list[str]\n","    type: str\n","\n","\n","model = genai.GenerativeModel(\n","    'gemini-1.5-flash-latest',\n","    generation_config=genai.GenerationConfig(\n","        temperature=0.1,\n","        response_mime_type=\"application/json\",\n","        response_schema=PizzaOrder,\n","    ))\n","\n","response = model.generate_content(\"Can I have a large dessert pizza with apple and chocolate\")\n","print(response.text)"],"metadata":{"id":"50fbf0260912","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1732793957489,"user_tz":-330,"elapsed":1927,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"8c34372d-394b-488a-b489-3d8736dd844a"},"outputs":[{"output_type":"stream","name":"stdout","text":["{\"ingredients\": [\"apple\", \"chocolate\"], \"size\": \"large\", \"type\": \"dessert pizza\"}\n"]}],"execution_count":27},{"cell_type":"markdown","source":["### Chain of Thought (CoT)\n","\n","Direct prompting on LLMs can return answers quickly and (in terms of output token usage) efficiently, but they can be prone to hallucination. The answer may \"look\" correct (in terms of language and syntax) but is incorrect in terms of factuality and reasoning.\n","\n","Chain-of-Thought prompting is a technique where you instruct the model to output intermediate reasoning steps, and it typically gets better results, especially when combined with few-shot examples. It is worth noting that this technique doesn't completely eliminate hallucinations, and that it tends to cost more to run, due to the increased token count.\n","\n","As models like the Gemini family are trained to be \"chatty\" and provide reasoning steps, you can ask the model to be more direct in the prompt."],"metadata":{"id":"4a93e338e57c"}},{"cell_type":"code","source":["prompt = \"\"\"When I was 4 years old, my partner was 3 times my age. Now, I\n","am 20 years old. How old is my partner? Return the answer directly.\"\"\"\n","\n","model = genai.GenerativeModel('gemini-1.5-flash-latest')\n","response = model.generate_content(prompt, request_options=retry_policy)\n","\n","print(response.text)"],"metadata":{"id":"5715555db1c1","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1732793965638,"user_tz":-330,"elapsed":8162,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"65166fe2-bc06-41d0-d882-0678503286a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["41\n","\n"]}],"execution_count":28},{"cell_type":"markdown","source":["Now try the same approach, but indicate to the model that it should \"think step by step\"."],"metadata":{"id":"e12b19677bfd"}},{"cell_type":"code","source":["prompt = \"\"\"When I was 4 years old, my partner was 3 times my age. Now,\n","I am 20 years old. How old is my partner? Let's think step by step.\"\"\"\n","\n","response = model.generate_content(prompt, request_options=retry_policy)\n","print(response.text)"],"metadata":{"id":"ffd7536a481f","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":323},"executionInfo":{"status":"ok","timestamp":1732793968512,"user_tz":-330,"elapsed":2893,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"79b47697-2194-43e4-f713-a0eb3f0ac090"},"outputs":[{"output_type":"stream","name":"stdout","text":["Step 1: Find the partner's age when you were 4.\n","\n","* When you were 4, your partner was 3 times your age, so they were 4 * 3 = 12 years old.\n","\n","Step 2: Find the age difference between you and your partner.\n","\n","* The age difference is 12 - 4 = 8 years.\n","\n","Step 3: Determine your partner's current age.\n","\n","* You are now 20 years old.\n","* Your partner is 8 years older than you.\n","* Therefore, your partner is currently 20 + 8 = 28 years old.\n","\n","So the answer is $\\boxed{28}$\n","\n"]}],"execution_count":29},{"cell_type":"markdown","source":["### ReAct: Reason and act\n","\n","In this example you will run a ReAct prompt directly in the Gemini API and perform the searching steps yourself. As this prompt follows a well-defined structure, there are frameworks available that wrap the prompt into easier-to-use APIs that make tool calls automatically, such as the LangChain example from the chapter.\n","\n","To try this out with the Wikipedia search engine, check out the [Searching Wikipedia with ReAct](https://github.com/google-gemini/cookbook/blob/main/examples/Search_Wikipedia_using_ReAct.ipynb) cookbook example.\n","\n","\n","> Note: The prompt and in-context examples used here are from [https://github.com/ysymyth/ReAct](https://github.com/ysymyth/ReAct) which is published under a [MIT license](https://opensource.org/licenses/MIT), Copyright (c) 2023 Shunyu Yao.\n","\n","<table align=left>\n","  <td>\n","    <a target=\"_blank\" href=\"https://aistudio.google.com/prompts/18oo63Lwosd-bQ6Ay51uGogB3Wk3H8XMO\"><img src=\"https://ai.google.dev/site-assets/images/marketing/home/icon-ais.png\" style=\"height: 24px\" height=24/> Open in AI Studio</a>\n","  </td>\n","</table>\n"],"metadata":{"id":"oiLgBQJj0V53"}},{"cell_type":"code","source":["model_instructions = \"\"\"\n","Solve a question answering task with interleaving Thought, Action, Observation steps. Thought can reason about the current situation,\n","Observation is understanding relevant information from an Action's output and Action can be one of three types:\n"," (1) <search>entity</search>, which searches the exact entity on Wikipedia and returns the first paragraph if it exists. If not, it\n","     will return some similar entities to search and you can try to search the information from those topics.\n"," (2) <lookup>keyword</lookup>, which returns the next sentence containing keyword in the current context. This only does exact matches,\n","     so keep your searches short.\n"," (3) <finish>answer</finish>, which returns the answer and finishes the task.\n","\"\"\"\n","\n","example1 = \"\"\"Question\n","Musician and satirist Allie Goertz wrote a song about the \"The Simpsons\" character Milhouse, who Matt Groening named after who?\n","\n","Thought 1\n","The question simplifies to \"The Simpsons\" character Milhouse is named after who. I only need to search Milhouse and find who it is named after.\n","\n","Action 1\n","<search>Milhouse</search>\n","\n","Observation 1\n","Milhouse Mussolini Van Houten is a recurring character in the Fox animated television series The Simpsons voiced by Pamela Hayden and created by Matt Groening.\n","\n","Thought 2\n","The paragraph does not tell who Milhouse is named after, maybe I can look up \"named after\".\n","\n","Action 2\n","<lookup>named after</lookup>\n","\n","Observation 2\n","Milhouse was named after U.S. president Richard Nixon, whose middle name was Milhous.\n","\n","Thought 3\n","Milhouse was named after U.S. president Richard Nixon, so the answer is Richard Nixon.\n","\n","Action 3\n","<finish>Richard Nixon</finish>\n","\"\"\"\n","\n","example2 = \"\"\"Question\n","What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?\n","\n","Thought 1\n","I need to search Colorado orogeny, find the area that the eastern sector of the Colorado orogeny extends into, then find the elevation range of the area.\n","\n","Action 1\n","<search>Colorado orogeny</search>\n","\n","Observation 1\n","The Colorado orogeny was an episode of mountain building (an orogeny) in Colorado and surrounding areas.\n","\n","Thought 2\n","It does not mention the eastern sector. So I need to look up eastern sector.\n","\n","Action 2\n","<lookup>eastern sector</lookup>\n","\n","Observation 2\n","The eastern sector extends into the High Plains and is called the Central Plains orogeny.\n","\n","Thought 3\n","The eastern sector of Colorado orogeny extends into the High Plains. So I need to search High Plains and find its elevation range.\n","\n","Action 3\n","<search>High Plains</search>\n","\n","Observation 3\n","High Plains refers to one of two distinct land regions\n","\n","Thought 4\n","I need to instead search High Plains (United States).\n","\n","Action 4\n","<search>High Plains (United States)</search>\n","\n","Observation 4\n","The High Plains are a subregion of the Great Plains. From east to west, the High Plains rise in elevation from around 1,800 to 7,000 ft (550 to 2,130m).\n","\n","Thought 5\n","High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.\n","\n","Action 5\n","<finish>1,800 to 7,000 ft</finish>\n","\"\"\"\n","\n","# Come up with more examples yourself, or take a look through https://github.com/ysymyth/ReAct/"],"metadata":{"id":"cBgyNJ5z0VSs","trusted":true,"executionInfo":{"status":"ok","timestamp":1732793968513,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}}},"outputs":[],"execution_count":30},{"cell_type":"markdown","source":["To capture a single step at a time, while ignoring any hallucinated Observation steps, you will use `stop_sequences` to end the generation process. The steps are `Thought`, `Action`, `Observation`, in that order."],"metadata":{"id":"C3wbfstjTgey"}},{"cell_type":"code","source":["question = \"\"\"Question\n","Who was the youngest author listed on the transformers NLP paper?\n","\"\"\"\n","\n","model = genai.GenerativeModel('gemini-1.5-flash-latest')\n","react_chat = model.start_chat()\n","\n","# You will perform the Action, so generate up to, but not including, the Observation.\n","config = genai.GenerationConfig(stop_sequences=[\"\\nObservation\"])\n","\n","resp = react_chat.send_message(\n","    [model_instructions, example1, example2, question],\n","    generation_config=config,\n","    request_options=retry_policy)\n","print(resp.text)"],"metadata":{"id":"8mxrXRkRTdXm","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":144},"executionInfo":{"status":"ok","timestamp":1732793973467,"user_tz":-330,"elapsed":4960,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"c3941187-9c69-457a-fe46-bf635da62fd6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Thought 1\n","I need to find the Transformers NLP paper and then find the authors and their ages.  This will require multiple steps.  First, I need to find the paper.\n","\n","Action 1\n","<search>Transformers NLP paper</search>\n","\n"]}],"execution_count":31},{"cell_type":"markdown","source":["Now you can perform this research yourself and supply it back to the model."],"metadata":{"id":"aW2PIdLbVv3l"}},{"cell_type":"code","source":["observation = \"\"\"Observation 1\n","[1706.03762] Attention Is All You Need\n","Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, Illia Polosukhin\n","We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely.\n","\"\"\"\n","resp = react_chat.send_message(observation, generation_config=config, request_options=retry_policy)\n","print(resp.text)"],"metadata":{"id":"mLMc0DZaV9g2","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":144},"executionInfo":{"status":"ok","timestamp":1732793978431,"user_tz":-330,"elapsed":4970,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"46c47572-8eb6-4c72-d060-13e54bf5f2bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Thought 2\n","The observation gives me the authors of the paper \"Attention is All You Need\".  I now need to find their ages.  This is difficult as the observation does not provide that information.  I cannot directly determine the youngest author from this alone.  A web search might help if I can find biographical information on the authors.  However,  I will try a different approach. I'll search for information about the authors individually, to see if I can find age information.  I will start with the first author.\n","\n","Action 2\n","<search>Ashish Vaswani</search>\n","\n"]}],"execution_count":32},{"cell_type":"markdown","source":["This process repeats until the `<finish>` action is reached. You can continue running this yourself if you like, or try the [Wikipedia example](https://github.com/google-gemini/cookbook/blob/main/examples/Search_Wikipedia_using_ReAct.ipynb) to see a fully automated ReAct system at work."],"metadata":{"id":"bo0tzf4nX6dA"}},{"cell_type":"markdown","source":["## Code prompting"],"metadata":{"id":"jPiZ_eIIaVPt"}},{"cell_type":"markdown","source":["### Generating code\n","\n","The Gemini family of models can be used to generate code, configuration and scripts. Generating code can be helpful when learning to code, learning a new language or for rapidly generating a first draft.\n","\n","It's important to be aware that since LLMs can't reason, and can repeat training data, it's essential to read and test your code first, and comply with any relevant licenses.\n","\n","<table align=left>\n","  <td>\n","    <a target=\"_blank\" href=\"https://aistudio.google.com/prompts/1YX71JGtzDjXQkgdes8bP6i3oH5lCRKxv\"><img src=\"https://ai.google.dev/site-assets/images/marketing/home/icon-ais.png\" style=\"height: 24px\" height=24/> Open in AI Studio</a>\n","  </td>\n","</table>"],"metadata":{"id":"ZinKamwXeR6C"}},{"cell_type":"code","source":["model = genai.GenerativeModel(\n","    'gemini-1.5-flash-latest',\n","    generation_config=genai.GenerationConfig(\n","        temperature=1,\n","        top_p=1,\n","        max_output_tokens=1024,\n","    ))\n","\n","# Gemini 1.5 models are very chatty, so it helps to specify they stick to the code.\n","code_prompt = \"\"\"\n","Write a Python function to calculate the factorial of a number. No explanation, provide only the code.\n","\"\"\"\n","\n","response = model.generate_content(code_prompt, request_options=retry_policy)\n","Markdown(response.text)"],"metadata":{"id":"fOQP9pqmeUO1","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1732793991052,"user_tz":-330,"elapsed":1758,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"2a15e8bc-16c5-4a3f-94ef-7a1f54b6e696"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"```python\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n```\n"},"metadata":{},"execution_count":36}],"execution_count":36},{"cell_type":"markdown","source":["### Code execution\n","\n","The Gemini API can automatically run generated code too, and will return the output.\n","\n","<table align=left>\n","  <td>\n","    <a target=\"_blank\" href=\"https://aistudio.google.com/prompts/11veFr_VYEwBWcLkhNLr-maCG0G8sS_7Z\"><img src=\"https://ai.google.dev/site-assets/images/marketing/home/icon-ais.png\" style=\"height: 24px\" height=24/> Open in AI Studio</a>\n","  </td>\n","</table>"],"metadata":{"id":"wlBMWSFhgVRQ"}},{"cell_type":"code","source":["model = genai.GenerativeModel(\n","    'gemini-1.5-flash-latest',\n","    tools='code_execution',)\n","\n","code_exec_prompt = \"\"\"\n","Calculate the sum of the first 14 prime numbers. Only consider the odd primes, and make sure you count them all.\n","\"\"\"\n","\n","response = model.generate_content(code_exec_prompt, request_options=retry_policy)\n","Markdown(response.text)"],"metadata":{"id":"jT3OfWYfhjRL","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":631},"executionInfo":{"status":"ok","timestamp":1732793983935,"user_tz":-330,"elapsed":5516,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"f69114b7-0c4b-47e4-bb27-c78d130e983c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"To calculate the sum of the first 14 odd prime numbers, I need to first identify those primes.  The first few odd prime numbers are 3, 5, 7, 11, 13, and so on.  I will use a Python script to generate the first 14 odd primes and then calculate their sum.\n\n\n``` python\ndef is_prime(n):\n    \"\"\"Checks if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ncount = 0\nnumber = 3\nprimes = []\nwhile count < 14:\n    if is_prime(number):\n        primes.append(number)\n        count += 1\n    number += 2\n\nprint(f\"The first 14 odd primes are: {primes}\")\nsum_of_primes = sum(primes)\nprint(f\"The sum of the first 14 odd primes is: {sum_of_primes}\")\n\n\n```\n```\nThe first 14 odd primes are: [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\nThe sum of the first 14 odd primes is: 326\n\n```\nThe Python code identifies the first 14 odd prime numbers and calculates their sum.  The output shows that the first 14 odd primes are 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, and 47. Their sum is 326.\n"},"metadata":{},"execution_count":33}],"execution_count":33},{"cell_type":"markdown","source":["While this looks like a single-part response, you can inspect the response to see the each of the steps: initial text, code generation, execution results, and final text summary."],"metadata":{"id":"ZspT1GSkjG6d"}},{"cell_type":"code","source":["for part in response.candidates[0].content.parts:\n","  print(part)\n","  print(\"-----\")"],"metadata":{"id":"j4gQVzcRjRX-","trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732793983936,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"0d4bad5f-1167-4ce9-9a2d-09adb0a19058"},"outputs":[{"output_type":"stream","name":"stdout","text":["text: \"To calculate the sum of the first 14 odd prime numbers, I need to first identify those primes.  The first few odd prime numbers are 3, 5, 7, 11, 13, and so on.  I will use a Python script to generate the first 14 odd primes and then calculate their sum.\\n\\n\"\n","\n","-----\n","executable_code {\n","  language: PYTHON\n","  code: \"\\ndef is_prime(n):\\n    \\\"\\\"\\\"Checks if a number is prime.\\\"\\\"\\\"\\n    if n <= 1:\\n        return False\\n    if n <= 3:\\n        return True\\n    if n % 2 == 0 or n % 3 == 0:\\n        return False\\n    i = 5\\n    while i * i <= n:\\n        if n % i == 0 or n % (i + 2) == 0:\\n            return False\\n        i += 6\\n    return True\\n\\ncount = 0\\nnumber = 3\\nprimes = []\\nwhile count < 14:\\n    if is_prime(number):\\n        primes.append(number)\\n        count += 1\\n    number += 2\\n\\nprint(f\\\"The first 14 odd primes are: {primes}\\\")\\nsum_of_primes = sum(primes)\\nprint(f\\\"The sum of the first 14 odd primes is: {sum_of_primes}\\\")\\n\\n\"\n","}\n","\n","-----\n","code_execution_result {\n","  outcome: OUTCOME_OK\n","  output: \"The first 14 odd primes are: [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\\nThe sum of the first 14 odd primes is: 326\\n\"\n","}\n","\n","-----\n","text: \"The Python code identifies the first 14 odd prime numbers and calculates their sum.  The output shows that the first 14 odd primes are 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, and 47. Their sum is 326.\\n\"\n","\n","-----\n"]}],"execution_count":34},{"cell_type":"markdown","source":["### Explaining code\n","\n","The Gemini family of models can explain code to you too.\n","\n","<table align=left>\n","  <td>\n","    <a target=\"_blank\" href=\"https://aistudio.google.com/prompts/1N7LGzWzCYieyOf_7bAG4plrmkpDNmUyb\"><img src=\"https://ai.google.dev/site-assets/images/marketing/home/icon-ais.png\" style=\"height: 24px\" height=24/> Open in AI Studio</a>\n","  </td>\n","</table>"],"metadata":{"id":"1gUX8QzCj4d5"}},{"cell_type":"code","source":["file_contents = !curl https://raw.githubusercontent.com/magicmonty/bash-git-prompt/refs/heads/master/gitprompt.sh\n","\n","explain_prompt = f\"\"\"\n","Please explain what this file does at a very high level. What is it, and why would I use it?\n","\n","```\n","{file_contents}\n","```\n","\"\"\"\n","\n","model = genai.GenerativeModel('gemini-1.5-flash-latest')\n","\n","response = model.generate_content(explain_prompt, request_options=retry_policy)\n","Markdown(response.text)"],"metadata":{"id":"7_jPMMoxkIEb","trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":397},"executionInfo":{"status":"ok","timestamp":1732793989300,"user_tz":-330,"elapsed":5375,"user":{"displayName":"Sajal Roychowdhury","userId":"16206110012882682681"}},"outputId":"a219a835-cb93-4a6d-a469-2e55a6b2a101"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"This bash script is a Git prompt configuration and customization tool.  At a high level, it enhances your bash (or zsh) prompt to display information about your current Git repository, such as the branch, status (e.g., changes staged, unstaged, conflicts), and optionally, upstream tracking information.  It also supports theming and customization.\n\n**What it does:**\n\nThe script defines numerous functions to:\n\n* **Detect Git repositories:** It checks if the current directory is within a Git repository.\n* **Fetch Git status:** It executes `git` commands to get the branch name, status (staged, unstaged, untracked files, conflicts, etc.), and upstream tracking information.\n* **Customize the prompt:** It allows for setting colors, symbols, and formatting elements using theme files (including creating custom themes).\n* **Integrate with the prompt:** It modifies your `PROMPT_COMMAND` environment variable to automatically call functions that update the prompt information whenever it changes.\n* **Handle asynchronous operations:** It uses background processes (`&`) to fetch remote changes (e.g., `git fetch`) without blocking the shell.\n* **Cross-shell compatibility:** It attempts to work with both bash and zsh.\n* **Manage theme:** It allows selection from available themes or creation of a custom theme.\n\n**Why you would use it:**\n\nYou would use this script to improve your command-line experience when working with Git.  Instead of constantly running `git status`, the relevant information is directly visible in your prompt, providing a quick overview of the state of your repository.  The theming options let you customize the appearance to your preference.\n\n\nIn short, it's a powerful tool for making your Git workflow more efficient and visually appealing.\n"},"metadata":{},"execution_count":35}],"execution_count":35},{"cell_type":"markdown","source":["## Learn more\n","\n","To learn more about prompting in depth:\n","\n","* Check out the whitepaper issued with today's content,\n","* Try out the apps listed at the top of this notebook ([TextFX](https://textfx.withgoogle.com/), [SQL Talk](https://sql-talk-r5gdynozbq-uc.a.run.app/) and [NotebookLM](https://notebooklm.google/)),\n","* Read the [Introduction to Prompting](https://ai.google.dev/gemini-api/docs/prompting-intro) from the Gemini API docs,\n","* Explore the Gemini API's [prompt gallery](https://ai.google.dev/gemini-api/prompts) and try them out in AI Studio,\n","* Check out the Gemini API cookbook for [inspirational examples](https://github.com/google-gemini/cookbook/blob/main/examples/) and [educational quickstarts](https://github.com/google-gemini/cookbook/blob/main/quickstarts/).\n","\n","And please share anything exciting you have tried in the Discord!"],"metadata":{"id":"2a8266d97ce5"}}]}